// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b1jHtzznz5qfWCWxvSbcUi
// Component: hPX9FO2ErV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_test.module.css"; // plasmic-import: b1jHtzznz5qfWCWxvSbcUi/projectcss
import sty from "./PlasmicInfoIconText.module.css"; // plasmic-import: hPX9FO2ErV/css

export type PlasmicInfoIconText__VariantMembers = {};

export type PlasmicInfoIconText__VariantsArgs = {};
type VariantPropType = keyof PlasmicInfoIconText__VariantsArgs;
export const PlasmicInfoIconText__VariantProps = new Array<VariantPropType>();

export type PlasmicInfoIconText__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInfoIconText__ArgsType;
export const PlasmicInfoIconText__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicInfoIconText__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultInfoIconTextProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

function PlasmicInfoIconText__RenderFunc(props: {
  variants: PlasmicInfoIconText__VariantsArgs;
  args: PlasmicInfoIconText__ArgsType;
  overrides: PlasmicInfoIconText__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___3UvUy)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__pUv1)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/plasmic_test/images/sec6Image1Png.png",
                fullWidth: 193,
                fullHeight: 192,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.children
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___9Gskv)}>
        {p.renderPlasmicSlot({
          defaultContents: "AIRPORT LOUNGE",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___7U4M2)}>
        {p.renderPlasmicSlot({
          defaultContents:
            "Das Warten auf den Flug ist dir zu \nlangweilig? Mit deiner Bluecard \nPremium vertreibst du dir die Zeit in \nexklusiven Airport Lounges weltweit.",
          value: args.slot2,
          className: classNames(sty.slotTargetSlot2)
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInfoIconText__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInfoIconText__VariantsArgs;
    args?: PlasmicInfoIconText__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInfoIconText__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInfoIconText__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInfoIconText__ArgProps,
      internalVariantPropNames: PlasmicInfoIconText__VariantProps
    });

    return PlasmicInfoIconText__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInfoIconText";
  } else {
    func.displayName = `PlasmicInfoIconText.${nodeName}`;
  }
  return func;
}

export const PlasmicInfoIconText = Object.assign(
  // Top-level PlasmicInfoIconText renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicInfoIconText
    internalVariantProps: PlasmicInfoIconText__VariantProps,
    internalArgProps: PlasmicInfoIconText__ArgProps
  }
);

export default PlasmicInfoIconText;
/* prettier-ignore-end */
