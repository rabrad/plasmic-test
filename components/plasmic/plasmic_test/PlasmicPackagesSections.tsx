// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b1jHtzznz5qfWCWxvSbcUi
// Component: 8MORm4CsJp
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: lnqd9ErfP5U/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_test.module.css"; // plasmic-import: b1jHtzznz5qfWCWxvSbcUi/projectcss
import sty from "./PlasmicPackagesSections.module.css"; // plasmic-import: 8MORm4CsJp/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: GX4aUrHbReI/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: lAPalT-xsgR/icon

export type PlasmicPackagesSections__VariantMembers = {
  reversed: "reversedCard";
};

export type PlasmicPackagesSections__VariantsArgs = {
  reversed?: SingleChoiceArg<"reversedCard">;
};

type VariantPropType = keyof PlasmicPackagesSections__VariantsArgs;
export const PlasmicPackagesSections__VariantProps = new Array<VariantPropType>(
  "reversed"
);

export type PlasmicPackagesSections__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPackagesSections__ArgsType;
export const PlasmicPackagesSections__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4"
);

export type PlasmicPackagesSections__OverridesType = {
  root?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultPackagesSectionsProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  reversed?: SingleChoiceArg<"reversedCard">;
  className?: string;
}

function PlasmicPackagesSections__RenderFunc(props: {
  variants: PlasmicPackagesSections__VariantsArgs;
  args: PlasmicPackagesSections__ArgsType;
  overrides: PlasmicPackagesSections__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootreversed_reversedCard]: hasVariant(
            variants,
            "reversed",
            "reversedCard"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.column__gYlkh, {
          [sty.columnreversed_reversedCard__gYlkhQ0Tta]: hasVariant(
            variants,
            "reversed",
            "reversedCard"
          )
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___2Gb03)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__dbKzT)}>
            {p.renderPlasmicSlot({
              defaultContents: "BLUECARD",
              value: args.slot,
              className: classNames(sty.slotTargetSlot)
            })}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__y7SSj)}>
            {p.renderPlasmicSlot({
              defaultContents: "powered by Mastercard®",
              value: args.slot2,
              className: classNames(sty.slotTargetSlot2)
            })}
          </div>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__bQ5P)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "Deine Bluecard inklusive eigenständigem \nGirokonto ist weltweit an Millionen Akzeptanzstellen  \neinsetzbar. Keine Bonitätsprüfung, jederzeit kündbar \nund keine versteckten Kosten. ",
            value: args.slot3,
            className: classNames(sty.slotTargetSlot3)
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__uwEg4)}>
          {p.renderPlasmicSlot({
            defaultContents: "gönn' dir jetzt deine Bluecard!",
            value: args.slot4,
            className: classNames(sty.slotTargetSlot4)
          })}
        </div>

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
        />
      </div>

      <div className={classNames(projectcss.all, sty.column__g8RKo)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__dua7O)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"628px" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/plasmic_test/images/section4Card1Pngpng.png",
                fullWidth: 630,
                fullHeight: 506,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenreversed_reversedCard]: hasVariant(
              variants,
              "reversed",
              "reversedCard"
            )
          })
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPackagesSections__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPackagesSections__VariantsArgs;
    args?: PlasmicPackagesSections__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPackagesSections__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPackagesSections__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPackagesSections__ArgProps,
      internalVariantPropNames: PlasmicPackagesSections__VariantProps
    });

    return PlasmicPackagesSections__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPackagesSections";
  } else {
    func.displayName = `PlasmicPackagesSections.${nodeName}`;
  }
  return func;
}

export const PlasmicPackagesSections = Object.assign(
  // Top-level PlasmicPackagesSections renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicPackagesSections
    internalVariantProps: PlasmicPackagesSections__VariantProps,
    internalArgProps: PlasmicPackagesSections__ArgProps
  }
);

export default PlasmicPackagesSections;
/* prettier-ignore-end */
