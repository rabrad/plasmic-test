// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b1jHtzznz5qfWCWxvSbcUi
// Component: oC9KOZtsJNg9
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Test from "../../Test"; // plasmic-import: MpF9-nqW6l/component

import { useScreenVariants as useScreenVariantsttBNf5QNnjj2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ttBNf_5qNnjj2/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_test.module.css"; // plasmic-import: b1jHtzznz5qfWCWxvSbcUi/projectcss
import sty from "./PlasmicTestEn.module.css"; // plasmic-import: oC9KOZtsJNg9/css

import LogosvgIcon from "./icons/PlasmicIcon__Logosvg"; // plasmic-import: FubHFUMaY/icon

export type PlasmicTestEn__VariantMembers = {};

export type PlasmicTestEn__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestEn__VariantsArgs;
export const PlasmicTestEn__VariantProps = new Array<VariantPropType>();

export type PlasmicTestEn__ArgsType = {};
type ArgPropType = keyof PlasmicTestEn__ArgsType;
export const PlasmicTestEn__ArgProps = new Array<ArgPropType>();

export type PlasmicTestEn__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  test?: p.Flex<typeof Test>;
};

export interface DefaultTestEnProps {}

function PlasmicTestEn__RenderFunc(props: {
  variants: PlasmicTestEn__VariantsArgs;
  args: PlasmicTestEn__ArgsType;
  overrides: PlasmicTestEn__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsttBNf5QNnjj2()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.columns__yoMzo)}>
            <div className={classNames(projectcss.all, sty.column__z9Xcm)}>
              <LogosvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__wcJ9)}>
              <div className={classNames(projectcss.all, sty.columns__eHcf)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.column__oLiCk)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__mbdrM
                      )}
                      component={Link}
                      href={"https://www.plasmic.app/" as const}
                      platform={"nextjs"}
                    >
                      {"KUNDENSERVICE"}
                    </p.PlasmicLink>
                  </div>
                ) : null}

                <div className={classNames(projectcss.all, sty.column__vjLjs)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__wkHeZ
                    )}
                    component={Link}
                    href={"https://www.plasmic.app/" as const}
                    platform={"nextjs"}
                  >
                    {"LOGIN"}
                  </p.PlasmicLink>
                </div>
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___0QcBj)}>
            <div className={classNames(projectcss.all, sty.freeBox__ac8Zw)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___7YdvH)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/plasmic_test/images/blueHeropng.png",
                  fullWidth: 419,
                  fullHeight: 313,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__cdwqQ)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/plasmic_test/images/bluePremiumHeropng.png",
                  fullWidth: 423,
                  fullHeight: 323,
                  aspectRatio: undefined
                }}
              />
            </div>

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__zrXnr)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("299px" as const)
                  : ("auto" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/plasmic_test/images/boyHeropng.png",
                fullWidth: 404,
                fullHeight: 685,
                aspectRatio: undefined
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__u9X5R)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("258px" as const)
                  : ("auto" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/plasmic_test/images/girlHeropng.png",
                fullWidth: 506,
                fullHeight: 590,
                aspectRatio: undefined
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__cskK0)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("207px" as const)
                  : ("300px" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/plasmic_test/images/pfeil11Png.png",
                fullWidth: 473,
                fullHeight: 423,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__id0J2
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? "EN" : "EN"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hRed
              )}
            >
              {
                "Keine Bonitätsprüfung. \nJederzeit kündbar. \nIn wenigen Tagen bei dir! "
              }
            </div>

            <Test
              data-plasmic-name={"test"}
              data-plasmic-override={overrides.test}
              className={classNames("__wab_instance", sty.test)}
              type={"primary" as const}
            />

            <div className={classNames(projectcss.all, sty.freeBox__wZcQo)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__eBjr)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/plasmic_test/images/graphityHeropng.png",
                  fullWidth: 382,
                  fullHeight: 419,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__dx1U)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/plasmic_test/images/boomHeropng.png",
                  fullWidth: 359,
                  fullHeight: 295,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "test"],
  svg: ["svg"],
  test: ["test"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  test: typeof Test;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestEn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestEn__VariantsArgs;
    args?: PlasmicTestEn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestEn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTestEn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTestEn__ArgProps,
      internalVariantPropNames: PlasmicTestEn__VariantProps
    });

    return PlasmicTestEn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestEn";
  } else {
    func.displayName = `PlasmicTestEn.${nodeName}`;
  }
  return func;
}

export const PlasmicTestEn = Object.assign(
  // Top-level PlasmicTestEn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    test: makeNodeComponent("test"),

    // Metadata about props expected for PlasmicTestEn
    internalVariantProps: PlasmicTestEn__VariantProps,
    internalArgProps: PlasmicTestEn__ArgProps
  }
);

export default PlasmicTestEn;
/* prettier-ignore-end */
