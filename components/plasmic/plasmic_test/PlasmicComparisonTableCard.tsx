// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b1jHtzznz5qfWCWxvSbcUi
// Component: 1ThabWFZHA
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: lnqd9ErfP5U/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_test.module.css"; // plasmic-import: b1jHtzznz5qfWCWxvSbcUi/projectcss
import sty from "./PlasmicComparisonTableCard.module.css"; // plasmic-import: 1ThabWFZHA/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: GX4aUrHbReI/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: lAPalT-xsgR/icon

export type PlasmicComparisonTableCard__VariantMembers = {};

export type PlasmicComparisonTableCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicComparisonTableCard__VariantsArgs;
export const PlasmicComparisonTableCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicComparisonTableCard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicComparisonTableCard__ArgsType;
export const PlasmicComparisonTableCard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicComparisonTableCard__OverridesType = {
  root?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultComparisonTableCardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

function PlasmicComparisonTableCard__RenderFunc(props: {
  variants: PlasmicComparisonTableCard__VariantsArgs;
  args: PlasmicComparisonTableCard__ArgsType;
  overrides: PlasmicComparisonTableCard__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__h88Vl)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__v0Tlv)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/plasmic_test/images/section8Card1Png.png",
                fullWidth: 327,
                fullHeight: 200,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.children
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__c6Iq)}>
        {p.renderPlasmicSlot({
          defaultContents: "BLUECARD",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___7R16X)}>
        {p.renderPlasmicSlot({
          defaultContents: "3,99 € pro Monat",
          value: args.slot2,
          className: classNames(sty.slotTargetSlot2)
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___8NkMj)}>
        {p.renderPlasmicSlot({
          defaultContents: "29,90 € Ausgabegebühr",
          value: args.slot3,
          className: classNames(sty.slotTargetSlot3)
        })}
      </div>

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
      >
        {"JETZT BESTELLEN"}
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComparisonTableCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComparisonTableCard__VariantsArgs;
    args?: PlasmicComparisonTableCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComparisonTableCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicComparisonTableCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicComparisonTableCard__ArgProps,
      internalVariantPropNames: PlasmicComparisonTableCard__VariantProps
    });

    return PlasmicComparisonTableCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComparisonTableCard";
  } else {
    func.displayName = `PlasmicComparisonTableCard.${nodeName}`;
  }
  return func;
}

export const PlasmicComparisonTableCard = Object.assign(
  // Top-level PlasmicComparisonTableCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicComparisonTableCard
    internalVariantProps: PlasmicComparisonTableCard__VariantProps,
    internalArgProps: PlasmicComparisonTableCard__ArgProps
  }
);

export default PlasmicComparisonTableCard;
/* prettier-ignore-end */
